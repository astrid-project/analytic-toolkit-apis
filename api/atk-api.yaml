openapi: "3.0.0"
info:
  version: 2.0.0
  title: Analytic Toolkit REST API
  license:
    name: Apache License 2.0
servers:
  - url: http://localhost:8080/v1
tags:
  - name: nodes
    description: Create/read/update/delete operations on nodes
  - name: use-cases
    description: Create/read/update/delete operations on use-cases
  - name: status
    description: Estimator status including correlations
  - name: estimator
    description: Low-level operations on the estimators settings defined for a given use-case, node and probe
  - name: history
    description: Low-level operations on the estimators forecast history
paths:
  /nodes:
    get:
      summary: Return list of all nodes currently managed
      operationId: Get all nodes
      tags:
        - nodes
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeConfigList"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Manage a new node identified by a new id
      operationId: Manage new node
      tags:
        - nodes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeConfig'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Remove all nodes from the list of managed nodes
      operationId: Delete all ndoes
      tags:
        - nodes
      responses:
        '200':
          description: Expected response to a valid request
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /nodes/{id}:
    get:
      summary: Detailed information for a specific node id
      operationId: Get node by id
      tags:
        - nodes
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the node to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeConfig"
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Update information for a given node id
      operationId: Update node by id
      tags:
        - nodes
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the node to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeConfig'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Remove node by its id from the managed nodes
      operationId: Delete node by id
      tags:
        - nodes
      parameters:
        - name: id
          in: path
          required: true
          description: The name of the node to delete
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /use-cases:
    get:
      summary: Return list of use-cases currently managed
      operationId: Get all use-cases
      tags:
        - use-cases
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UseCaseList"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Manage a new use-case identified by a new id
      operationId: Manage a new use-case
      tags:
        - use-cases
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UseCase'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UseCase"
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Remove all use-cases from the managed use-cases
      operationId: Delete all use cases
      tags:
        - use-cases
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UseCase"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /use-cases/{id}:
    get:
      summary: Detailed information for a specific use-case by id
      operationId: Get use-case by name
      tags:
        - use-cases
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the use-case to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UseCase"
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Update information for a specific use-case by id
      operationId: Update use-case
      tags:
        - use-cases
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the use-case to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UseCase'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UseCase"
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Remove use-case by id from the managed use-cases
      operationId: Delete use case by id
      tags:
        - use-cases
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the use-case to delete
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UseCase"
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /status:
    get:
      summary: Get the estimator status, including correlations
      operationId: Get status
      tags:
        - status
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullStatus"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /estimator/hysteresis:
    get:
      summary: Get the hysteresis between WARN and ALARM
      operationId: Get hysteresis
      tags:
        - estimator
      parameters:
        - in: query
          name: use-case
          description: use-case identifier
          example: NTP
          required: true
          schema:
            type: string
        - in: query
          name: node
          description: node identifier
          example: Genoa-2
          required: true
          schema:
            type: string
        - in: query
          name: probe
          description: probe identifier
          example: detection-1
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EstimatorHysteresisState"
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Set the hysteresis between WARN and STATUS
      operationId: Set hysteresis
      tags:
        - estimator
      requestBody:
        description: The use-case and node.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EstimatorHysteresisConfig"
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /estimator/params:
    get:
      summary: Get the ARIMA parameters
      operationId: Get estimator parameters
      tags:
        - estimator
      parameters:
        - in: query
          name: use-case
          description: use-case identifier
          example: NTP
          required: true
          schema:
            type: string
        - in: query
          name: node
          description: node identifier
          example: Genoa-2
          required: true
          schema:
            type: string
        - in: query
          name: probe
          description: probe identifier
          example: forecast-1
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArimaParametersState"
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Update the ARIMA parameters
      operationId: Update estimator parameters
      tags:
        - estimator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArimaParametersConfig'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /estimator/forecast-threshold:
    get:
      summary: Get the forecast threshold
      operationId: Get forecast threshold
      tags:
        - estimator
      parameters:
        - in: query
          name: use-case
          description: use-case identifier
          example: NTP
          required: true
          schema:
            type: string
        - in: query
          name: node
          description: node identifier
          example: Genoa-2
          required: true
          schema:
            type: string
        - in: query
          name: probe
          description: probe identifier
          example: forecast-1
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThresholdValueState'
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Set the forecast threshold
      operationId: Set forecast threshold
      tags:
        - estimator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThresholdValueConfig'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /estimator/detection-threshold:
    get:
      summary: Get the detection threshold
      operationId: Get detection threshold
      tags:
        - estimator
      parameters:
        - in: query
          name: use-case
          description: use-case identifier
          example: NTP
          required: true
          schema:
            type: string
        - in: query
          name: node
          description: node identifier
          example: Genoa-2
          required: true
          schema:
            type: string
        - in: query
          name: probe
          description: probe identifier
          example: detection-1
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThresholdValueState"
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Set the detection threshold
      operationId: Set detection threshold
      tags:
        - estimator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThresholdValueConfig"
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /estimator/area-detection-percentage:
    get:
      summary: Get the relative per-area detection threshold
      operationId: Get relative per-area detection threshold
      tags:
        - estimator
      parameters:
        - in: query
          name: use-case
          description: use-case identifier
          example: NTP
          required: true
          schema:
            type: string
        - in: query
          name: node
          description: node identifier
          example: Genoa-2
          required: true
          schema:
            type: string
        - in: query
          name: probe
          description: probe identifier
          example: detection-1
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PercentageState'
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Set the relative per-area detection threshold
      operationId: Set relative per-area detection threshold
      tags:
        - estimator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PercentageConfig'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /estimator/type-detection-percentage:
    get:
      summary: Get the relative per-type detection threshold
      operationId: Get relative per-type detection threshold
      tags:
        - estimator
      parameters:
        - in: query
          name: use-case
          description: use-case identifier
          example: NTP
          required: true
          schema:
            type: string
        - in: query
          name: node
          description: node identifier
          example: Genoa-2
          required: true
          schema:
            type: string
        - in: query
          name: probe
          description: probe identifier
          example: detection-1
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PercentageState'
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Set the relative per-type detection threshold
      operationId: Set relative per-type detection threshold
      tags:
        - estimator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PercentageConfig'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /estimator/area-correlation-percentage:
    get:
      summary: Get the relative per-area correlation threshold
      operationId: Get relative per-area correlation threshold
      tags:
        - estimator
      parameters:
        - in: query
          name: use-case
          description: use-case identifier
          example: NTP
          required: true
          schema:
            type: string
        - in: query
          name: node
          description: node identifier
          example: Genoa-2
          required: true
          schema:
            type: string
        - in: query
          name: probe
          description: probe identifier
          example: detection-1
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PercentageState'
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Set the relative per-area correlation threshold
      operationId: Set relative per-area correlation threshold
      tags:
        - estimator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PercentageConfig'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /estimator/type-correlation-percentage:
    get:
      summary: Get the relative per-type correlation threshold
      operationId: get relative per-type correlation threshold
      tags:
        - estimator
      parameters:
        - in: query
          name: use-case
          description: use-case identifier
          example: NTP
          required: true
          schema:
            type: string
        - in: query
          name: node
          description: node identifier
          example: Genoa-2
          required: true
          schema:
            type: string
        - in: query
          name: probe
          description: probe identifier
          example: detection-1
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PercentageState'
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /history/:
    get:
      summary: Return estimator forecast history for the given use-case, node and probe
      operationId: Get history by use-case, node and probe
      tags:
        - history
      parameters:
        - in: query
          name: use-case
          description: use-case identifier
          example: NTP
          required: true
          schema:
            type: string
        - in: query
          name: node
          description: node identifier
          example: Genoa-2
          required: true
          schema:
            type: string
        - in: query
          name: probe
          description: probe identifier
          example: detection-1
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HistoryPoint"
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /history/realign/:
    post:
      summary: Realign the forecast history for the given use-case, node and probe
      operationId: Realign an estimator history
      tags:
        - history
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UNP-identifier'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    NodeConfigList:
      type: array
      items:
        $ref: '#/components/schemas/NodeConfig'
    NodeConfig:
      type: object
      required:
        - node-id
      properties:
        node-id:
          type: string
          example: Genoa-Erzelli
        area:
          type: string
          example: Genoa
        type:
          type: string
          example: NTP
        use-case:
          type: array
          items:
            type: string
          example: [ NTP1, NTP2 ]
    UseCaseList:
      type: array
      items:
        $ref: '#/components/schemas/UseCase'
    UseCase:
      type: object
      required:
        - uc-id
      properties:
        uc-id:
          type: string
          example: NTP
        forecast-parameters:
          type: array
          items:
            $ref: "#/components/schemas/ForecastParameter"
          minItems: 1
          maxItems: 4
        detection-parameters:
          type: array
          items:
            $ref: "#/components/schemas/DetectionParameter"
          minItems: 1
          maxItems: 4
    ForecastParameter:
      description: "A parameter used for forecast and its threshold"
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: NTP_volume
              description: Unique identifier of each parameter
        - $ref: "#/components/schemas/ThresholdValueState"
    ThresholdValueState:
      type: object
      properties:
        threshold:
          format: int32
          minimum: 0
          example: 474
          description: Absolute value of a threshold
    ThresholdValueConfig:
      allOf:
        - $ref: '#/components/schemas/ThresholdValueState'
        - $ref: '#/components/schemas/UNP-identifier'
    DetectionParameter:
      description: >
        A parameter used for detection and its threshold, the hysteresis
        and its set of relative thresholds for correlation.
        The "area-detection-percentage" is a percentage of the detection threshold
        and is used to compute a, typically lower, per-area detection threshold.
        For every area A, ATk looks for its nodes where the resulting per-area
        detection threshold is exceeded. 
        If the percentage of these nodes in an area A exceeds the "area-correlation-percentage",
        then ATk decides status "WARN" for the area A, otherwise status "BAU".
        Similarly, the "type-detection-percentage" is a percentage of the detection threshold
        and is used to compute a, typically lower, per-type detection threshold.
        For every node type T, ATk looks for nodes where the resulting per-type
        detection threshold is exceeded. 
        If the percentage of these nodes for a type T exceeds the "type-correlation-percentage",
        then ATk decides status "WARN" for the type T, otherwise status "BAU".
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: NTP_monlist
              description: Unique identifier of each parameter
            area-detection-percentage:
              $ref: '#/components/schemas/PercentageState'
            type-detection-percentage:
              $ref: '#/components/schemas/PercentageState'
            area-correlation-percentage:
              $ref: '#/components/schemas/PercentageState'
            type-correlation-percentage:
              $ref: '#/components/schemas/PercentageState'
        - $ref: '#/components/schemas/ThresholdValueState'
        - $ref: '#/components/schemas/EstimatorHysteresisState'
    ArimaParametersState:
      type: object
      properties:
        P:
          type: "integer"
          format: int64
          example: 5
        D:
          type: "integer"
          format: int64
          example: 1
        Q:
          type: "integer"
          format: int64
          example: 0     
    ArimaParametersConfig:
      allOf:
        - $ref: '#/components/schemas/UNP-identifier'
        - $ref: '#/components/schemas/ArimaParametersState'
    UNP-identifier:
      description: reusable model containing just use-case (U), node (N) and probe (P) identifier
      type: object
      properties:
        use-case:
          description: use-case identifier
          type: string
          example: NTP
        node:
          description: node identifier
          type: string
          example: Milan-3
        probe:
          description: probe identifier
          type: string
          example: probe-C
    EstimatorHysteresisState:
      description: The estimator waits for this number of time intervals before passing from WARN to ALARM state
      type: object
      properties:
        histeresys:
          type: integer
          format: int32
          minimum: 0
          maximum: 10
          example: 3
    EstimatorHysteresisConfig:
      description: This is EstimatorHysteresisState decorated with use-case, node and probe information.
      allOf:
      - $ref: '#/components/schemas/EstimatorHysteresisState'
      - $ref: '#/components/schemas/UNP-identifier'
    Status:
      type: "string"
      enum: [BAU, WARN, ALARM, UNDEFINED]
      example: BAU
    FullStatus:
      type: object
      description: return the status computed across all node types and areas, for each use-case.
      properties:
        time:
          $ref: '#/components/schemas/Timestamp'
        network-status:
          $ref: "#/components/schemas/Status"
        correlation-type-status:
          type: array
          items:
            $ref: "#/components/schemas/CorrelationStatusByType"
        correlation-area-status:
          type: array
          items:
            $ref: "#/components/schemas/CorrelationStatusByArea"
    CorrelationStatusByType:
      type: object
      description: correlationstatus computed across all node types
      properties:
        use-case:
          type: string
          example: "MITM"
          description: use-case identifier
        correlations:
          type: array
          items:
            $ref: "#/components/schemas/CorrelationStatusByTypeElement"
    CorrelationStatusByArea:
      type: object
      description: correlationstatus computed across all areas
      properties:
        use-case:
          type: string
          example: "MITM"
          description: use-case identifier
        correlations:
          type: array
          items:
            $ref: "#/components/schemas/CorrelationStatusByAreaElement"
    CorrelationStatusByTypeElement:
      type: object
      properties:
        node-type:
          type: string
          example: PE-Routers
        value:
          $ref: "#/components/schemas/Status"
    CorrelationStatusByAreaElement:
      type: object
      properties:
        area:
          type: string
          example: Turin
        value:
          $ref: "#/components/schemas/Status"
    PercentageState:
      type: object
      properties:
        value:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          example: 11
    PercentageConfig:
      allOf:
        - $ref: '#/components/schemas/PercentageState'
        - $ref: '#/components/schemas/UNP-identifier'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      example:
        code: "500"
        message: "Internal application error"
    HistoryPoint:
      type: object
      properties:
        time:
          $ref: '#/components/schemas/Timestamp'
        value:
          $ref: "#/components/schemas/Status"
    Timestamp:
      type: integer
      format: int32
      example: 1600034400
      minimum: 0
      description: seconds since epoch
